version: '3.8'

services:
  # Database
  db:
    image: postgres:16-alpine
    container_name: alldownloads-db
    environment:
      POSTGRES_DB: alldownloads
      POSTGRES_USER: alldl
      POSTGRES_PASSWORD: alldl
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alldl -d alldownloads"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  cache:
    image: redis:7-alpine
    container_name: alldownloads-cache
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: alldownloads-api
    environment:
      DB_URL: postgres://alldl:alldl@db:5432/alldownloads?sslmode=disable
      REDIS_URL: redis://cache:6379/0
      PORT: 8080
      AUTH_TOKEN: ${AUTH_TOKEN:-change-me-to-secure-token}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,https://localhost}
      RATE_LIMIT_REQUESTS_PER_MINUTE: ${RATE_LIMIT_REQUESTS_PER_MINUTE:-60}
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # Worker Service
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: alldownloads-worker
    environment:
      DB_URL: postgres://alldl:alldl@db:5432/alldownloads?sslmode=disable
      REDIS_URL: redis://cache:6379/0
      REFRESH_CRON: ${REFRESH_CRON:-@every 6h}
      HTTP_TIMEOUT: ${HTTP_TIMEOUT:-15s}
      MAX_CONCURRENT_FETCHES: ${MAX_CONCURRENT_FETCHES:-6}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      api:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # UI Service
  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    container_name: alldownloads-ui
    environment:
      API_BASE_URL: http://api:8080
      NEXT_PUBLIC_API_BASE_URL: ${BASE_URL:-http://localhost:8080}
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # Reverse Proxy
  proxy:
    image: caddy:2-alpine
    container_name: alldownloads-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - api
      - ui
    restart: unless-stopped

  # Optional: MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: alldownloads-minio
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    profiles:
      - storage

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  minio_data:
    driver: local

networks:
  default:
    name: alldownloads-network