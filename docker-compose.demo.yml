services:
  # Database
  db:
    image: postgres:16-alpine
    container_name: alldownloads-db
    environment:
      POSTGRES_DB: alldownloads
      POSTGRES_USER: alldl
      POSTGRES_PASSWORD: alldl
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alldl -d alldownloads"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  cache:
    image: redis:7-alpine
    container_name: alldownloads-cache
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: alldownloads-api
    environment:
      DB_URL: postgres://alldl:alldl@db:5432/alldownloads?sslmode=disable
      REDIS_URL: redis://cache:6379/0
      PORT: 8080
      AUTH_TOKEN: ${AUTH_TOKEN:-change-me-to-secure-token}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,https://localhost}
      RATE_LIMIT_REQUESTS_PER_MINUTE: ${RATE_LIMIT_REQUESTS_PER_MINUTE:-60}
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Worker Service
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: alldownloads-worker
    environment:
      DB_URL: postgres://alldl:alldl@db:5432/alldownloads?sslmode=disable
      REDIS_URL: redis://cache:6379/0
      REFRESH_CRON: ${REFRESH_CRON:-@every 6h}
      HTTP_TIMEOUT: ${HTTP_TIMEOUT:-15s}
      MAX_CONCURRENT_FETCHES: ${MAX_CONCURRENT_FETCHES:-6}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      api:
        condition: service_healthy
    restart: unless-stopped

  # Simple Demo UI
  demo:
    image: nginx:alpine
    container_name: alldownloads-demo
    volumes:
      - ./demo:/usr/share/nginx/html:ro
    ports:
      - "3000:80"
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - default
      - proxy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: alldownloads-network
  proxy:
    external: true